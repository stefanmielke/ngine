name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MinGW", artifact: "Windows.7z",
            os: windows-latest,
            cc: "gcc", cxx: "g++"
          }
          - {
            name: "Ubuntu Latest GCC", artifact: "Linux.7z",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }

    steps:
    - uses: actions/checkout@v2

    - name: Install SDL2 and SDL2_image
      shell: cmake -P {0}
      run: |
        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
        
        if ("${{ runner.os }}" STREQUAL "Windows")
          execute_process(COMMAND ${CMAKE_COMMAND} -E mkdir SDL2)
          file(DOWNLOAD "https://www.libsdl.org/release/SDL2-devel-2.0.20-mingw.tar.gz" ./SDL2/SDL2.tar.gz SHOW_PROGRESS)
          file(DOWNLOAD "https://www.libsdl.org/projects/SDL_image/release/SDL2_image-devel-2.0.5-mingw.tar.gz" ./SDL2/SDL2_image.tar.gz SHOW_PROGRESS)
        
          execute_process(COMMAND ${CMAKE_COMMAND} -E cd SDL2
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar -xzf SDL2.tar.gz)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar -xzf SDL2_image.tar.gz)
        
          execute_process(COMMAND ${CMAKE_COMMAND} -E cd SDL2-2.0.20)
          execute_process(COMMAND ${CMAKE_COMMAND} -E make native)
          execute_process(COMMAND ${CMAKE_COMMAND} -E cd ..)
        
          execute_process(COMMAND ${CMAKE_COMMAND} -E cd SDL2_image-2.0.5)
          execute_process(COMMAND ${CMAKE_COMMAND} -E make native)
          execute_process(COMMAND ${CMAKE_COMMAND} -E cd ..)
        
          execute_process(COMMAND ${CMAKE_COMMAND} -E cd ..)
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(COMMAND ${CMAKE_COMMAND} -E sudo apt-get update)
          execute_process(COMMAND ${CMAKE_COMMAND} -E sudo apt-get install libsdl2-image-dev)
          execute_process(COMMAND ${CMAKE_COMMAND} -E mkdir SDL2)
          execute_process(COMMAND ${CMAKE_COMMAND} -E cd SDL2)
          execute_process(COMMAND ${CMAKE_COMMAND} -E wget https://www.libsdl.org/release/SDL2-2.0.20.tar.gz)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar -xzf SDL2-2.0.20.tar.gz)
          execute_process(COMMAND ${CMAKE_COMMAND} -E cd SDL2-2.0.20)
          execute_process(COMMAND ${CMAKE_COMMAND} -E ./configure)
          execute_process(COMMAND ${CMAKE_COMMAND} -E make all -j)
          execute_process(COMMAND ${CMAKE_COMMAND} -E sudo make install)
          execute_process(COMMAND ${CMAKE_COMMAND} -E cd ../..)
        endif()

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          chmod +x ${{github.workspace}}/build/ngine
        endif()

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Archive
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.config.artifact}}
        path: |
          ${{github.workspace}}/build/ngine
          ${{github.workspace}}/build/ngine.exe
          ${{github.workspace}}/build/montserrat.ttf